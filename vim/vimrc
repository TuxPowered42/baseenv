" To be used for other stuff.
let vimDir = '$HOME/.vim'

set mouse=a

syntax on                      " display nice colours
set nocompatible               " Welcome to 2017
set smartindent                " others are autoindent (dumber) or cindent (smarter)
set tabstop=4                  " 1 tab == 4 spaces
set shiftwidth=4               " 1 indent == 4 spaces
set shiftround                 " use multiples of 'shiftwidth'
set expandtab                  " write spaces instead of tabs
filetype plugin indent on      " set indentation automatically for known filetypes
set enc=utf-8                  " default encoding
set backspace=indent,eol,start " made backspace work
set wildmode=list:full
set wildmenu
set ignorecase
colorscheme elflord

set modeline " load per-file vim settings
autocmd BufWritePre,BufRead *.c,*.conf,*.cpp,*.css,*.erb,*.js,*.json,*.php,*.pp,*.py,*.sh,*.sql :%s/\s\+$//e
autocmd FileType python setl shiftwidth=4 sts=4 expandtab
autocmd FileType sh,make,c,cpp setl shiftwidth=8 tabstop=8 noexpandtab
autocmd FileType puppet setl colorcolumn=140
 
set incsearch " show the `best match so far'
set hlsearch  " highlight search
set smartcase " case-insensitive search

set laststatus=2 " status bar, 2=always
set ruler        " show current position in statusbar
set number

if has("clipboard")
    set clipboard=unnamed " copy to the system clipboard
    if has("unnamedplus") " X11 support
        set clipboard+=unnamedplus
    endif
endif

let g:plug_url_format = 'git@github.com:%s.git'

" Use some plugins!
call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-syntastic/syntastic'
"Plug 'fatih/vim-go'
"Plug 'Shougo/neocomplete'
"Plug 'Shougo/neosnippet'
"Plug 'Shougo/neosnippet-snippets'
"Plug 'majutsushi/tagbar'
"Plug 'nvie/vim-flake8'
call plug#end()

" Mouse configuration
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end
set mouse=a

"Save last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Keep undo history across sessions
if has('persistent_undo')
    let &undodir = expand(vimDir . '/undodir')
    :silent call system('mkdir -p ' . vimDir)
    :silent call system('mkdir -p ' . &undodir)
    set undofile
    set undolevels=2000
    set undoreload=10000
endif

" Let's use buffers!
" This way one can split screen and see multiple files at once.
" Unlike with tabs.
set hidden " Allow changing buffers without saving
nnoremap <C-k> :bprev<CR>
nnoremap <C-l> :bnext<CR>
let g:airline#extensions#tabline#enabled = 1
"let g:airline_powerline_fonts = 1

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers=['flake8']

"let g:buftabline_show = 2
"let g:buftabline_numbers = 1
"let g:buftabline_indicators = 1
"let g:buftabline_separators = 0

" Go development
"let g:go_highlight_functions = 1
"let g:go_highlight_methods = 1
"let g:go_highlight_fields = 1
"let g:go_highlight_types = 1
"let g:go_highlight_operators = 1
"let g:go_highlight_build_constraints = 1
"let g:go_fmt_command = "goimports"
"let g:neocomplete#enable_at_startup = 1



"let g:vim_arduino_ino_cmd = 'ano'
"let g:vim_arduino_auto_open_serial = 1

set colorcolumn=80

nmap <F8> :TagbarToggle<CR>
